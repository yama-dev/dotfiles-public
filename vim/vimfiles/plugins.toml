# :call dein#recache_runtimepath()
# :call dein#recache_runtimepath()

# # Required:
# [[plugins]]
# repo = 'Shougo/dein.vim'

# denite.
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction
'''

# Required:
[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

# Diff view
[[plugins]]
repo = 'will133/vim-dirdiff'
hook_add = '''
let g:DirDiffAddArgs = "-f"
let g:DirDiffExcludes = "node_modules,*.exe,.*.swp,.*.psd,.*.ai"
let g:DirDiffIgnoreCase = 0
let g:DirDiffWindowSize = 20
'''

# Indent view.
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help','calendar','startify']

let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2

let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=black ctermbg=237
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgrey ctermbg=243
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'vim-scripts/renamer.vim'

[[plugins]]
repo = 'mattn/vim-findroot'
hook_add = '''
let g:findroot_patterns = [
  \  '.git/',
  \  '.gitignore',
  \  'Makefile',
  \  '.config.json',
  \  'README.md',
  \]
let g:findroot_not_for_subdir = 0
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}), <bang>0)

" without filename
command! -bang -nargs=* RG
  \ call fzf#vim#grep(
  \   "rg --column --line-number --no-heading --color=always --smart-case -- ".shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

nnoremap <silent> <leader>ff :Files<CR>
nnoremap <silent> <leader>fg :Rg<CR>
nnoremap <silent> <leader>fG :RG<CR>
'''

[[plugins]]
repo = 'voldikss/vim-floaterm'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html','vue','scss','css','sass']
hook_add = '''
let g:user_emmet_leader_key='<C-e>'
'''

[[plugins]]
repo = 'tpope/vim-markdown'
hook_add = '''
let g:markdown_fenced_languages = ['html', 'css', 'scss', 'javascript', 'python', 'bash=sh', 'php']
let g:markdown_syntax_conceal = 0
'''

# Snippet.
[[plugins]]
repo = 'honza/vim-snippets'

# StatusLine.
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline#extensions#default#layout = [
  \   ['a','b','y','x'],
  \   ['c','z','error','warning']
  \ ]

" tab line.
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#tabs_label = 'Tabs'
let g:airline_section_c = airline#section#create(['file'])
let g:airline#extensions#tabline#buffer_idx_format = {
  \ '0': '[0]',
  \ '1': '[1]',
  \ '2': '[2]',
  \ '3': '[3]',
  \ '4': '[4]',
  \ '5': '[5]',
  \ '6': '[6]',
  \ '7': '[7]',
  \ '8': '[8]',
  \ '9': '[9]'
  \}

" fonts
if has('macunix')
  let g:airline_powerline_fonts = 1
endif

" unicode symbols
let g:airline_left_sep = '▶'
let g:airline_right_sep = '◀'

" mode
let g:airline_mode_map = {
  \ '__'     : '-',
  \ 'c'      : 'Command',
  \ 'i'      : 'Insert',
  \ 'ic'     : 'I',
  \ 'ix'     : 'I',
  \ 'n'      : 'Normal',
  \ 'multi'  : 'Multi',
  \ 'ni'     : 'N',
  \ 'no'     : 'N',
  \ 'R'      : 'Replace',
  \ 'Rv'     : 'R',
  \ 's'      : 'S',
  \ 'S'      : 'S',
  \ ''     : 'S',
  \ 't'      : 'T',
  \ 'v'      : 'Visual',
  \ 'V'      : 'V-Line',
  \ ''     : 'V-Block'
  \ }
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

# Git.
# -> shows git diff markers in the sign column
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_max_signs = 500
let g:gitgutter_map_keys = 0
let g:gitgutter_highlight_lines = 0
let g:gitgutter_override_sign_column_highlight = 0

nnoremap <leader>ggt :GitGutterLineHighlightsToggle<CR> " GitGutter Highlight Toggle.
nnoremap <leader>ggu :GitGutterUndoHunk<CR> " Reset Hunk under cursor.
nmap [c <Plug>(GitGutterPrevHunk)
nmap ]c <Plug>(GitGutterNextHunk)
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap <leader>ggg :Git<CR>
nnoremap <leader>ggf :Git fetch --all --prune<CR>
nnoremap <leader>ggs :Git status<CR>
nnoremap <leader>gga :Git add -u<CR>
nnoremap <leader>ggc :Git commit<CR>
nnoremap <leader>ggl :Git log<CR>
nnoremap <leader>ggb :Git branch<CR>
nnoremap <leader>ggd :Git diff<CR>
nnoremap <leader>ggp :Git pull<CR>
nnoremap <leader>ggP :Git push<CR>
'''

[[plugins]]
repo = 'cohama/agit.vim'

# Format.
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
vmap <leader>al <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
hook_add = '''
let g:vimproc#download_windows_dll = 1
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
  \ 'runner'    : 'vimproc',
  \ 'runner/vimproc/updatetime' : 60,
  \ 'outputter' : 'error',
  \ 'outputter/error/success' : 'buffer',
  \ 'outputter/error/error'   : 'quickfix',
  \ 'outputter/buffer/split'  : ':rightbelow 10sp',
  \ 'outputter/buffer/close_on_empty' : 1,
  \ }
autocmd FileType qf nnoremap <silent><buffer>q :quit<CR>
'''

# Util.
[[plugins]]
repo = 'mg979/vim-visual-multi'
rev = 'master'
hook_add = '''
let g:VM_default_mappings = 0
let g:VM_maps = {}
" let g:VM_maps['Find Under']         = '<C-d>' " replace C-n
" let g:VM_maps['Find Subword Under'] = '<C-d>' " replace visual C-n
" let g:VM_maps["Add Cursor Down"] = '<M-j>' " new cursor down
" let g:VM_maps["Add Cursor Up"]   = '<M-k>' " new cursor up
" let g:VM_maps["Select Cursor Down"] = '<M-C-Down>' " start selecting down
" let g:VM_maps["Select Cursor Up"]   = '<M-C-Up>'   " start selecting up
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
'''

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = '''
source ~/vimfiles/startify.vim
nnoremap <leader>s :Startify<CR>
'''

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
nmap <leader>m <Plug>(quickhl-manual-this)
xmap <leader>m <Plug>(quickhl-manual-this)
nmap <leader>M <Plug>(quickhl-manual-reset)
xmap <leader>M <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
" mapping
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)
" clear status
nmap <Esc><Esc> <Plug>(anzu-clear-search-status)
" statusline
set statusline=%{anzu#search_status()}
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'
hook_add = '''
let g:AutoPairsShortcutToggle = '<C-p>'
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

# preview.
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
build = '''
sh -c "cd app && yarn install"
'''
hook_add = '''
let g:mkdp_markdown_css = expand('~/markdown.css')
let g:mkdp_highlight_css = expand('~/highlight.css')
let g:mkdp_page_title = '「${name}」'
let g:mkdp_filetypes = ['markdown']
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
set helplang=ja
'''

[[plugins]]
repo = 'vim-scripts/BufOnly.vim'

# undotree
[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
  nnoremap U :UndotreeToggle<CR>
'''

# JSDoc
[[plugins]]
repo = 'heavenshell/vim-jsdoc'
build = 'make install'
hook_add = '''
  let g:jsdoc_allow_input_prompt=1
  let g:jsdoc_input_description=1
  let g:jsdoc_enable_es6=1
  nnoremap <leader>j :JsDoc<CR>
'''

[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = '''
nmap <C-c> :Calendar -view=year -split=horizontal -position=below -height=12<CR>
nmap <C-C> :Calendar<CR>
'''

# language server.
[[plugins]]
repo = 'neoclide/coc.nvim'
merged = '0'
rev = 'release'
hook_add = '''
let g:coc_global_extensions = [
  \ 'coc-cmake',
  \ 'coc-css',
  \ 'coc-dictionary',
  \ 'coc-emmet',
  \ 'coc-emoji',
  \ 'coc-eslint',
  \ 'coc-explorer',
  \ 'coc-floaterm',
  \ 'coc-fzf-preview',
  \ 'coc-git',
  \ 'coc-go',
  \ 'coc-highlight',
  \ 'coc-html',
  \ 'coc-htmlhint',
  \ 'coc-html-css-support',
  \ 'coc-json',
  \ 'coc-lists',
  \ 'coc-markdownlint',
  \ 'coc-omni',
  \ 'coc-phpls',
  \ 'coc-powershell',
  \ 'coc-prettier',
  \ 'coc-restclient',
  \ 'coc-rls',
  \ 'coc-sh',
  \ 'coc-snippets',
  \ 'coc-sql',
  \ 'coc-stylelint',
  \ 'coc-syntax',
  \ 'coc-tabnine',
  \ 'coc-tsserver',
  \ 'coc-vetur',
  \ 'coc-vimlsp',
  \ 'coc-xml',
  \ 'coc-yaml',
  \ ]

autocmd CursorHold * silent call CocActionAsync('highlight')
source ~/vimfiles/coc.vim
source ~/vimfiles/coc-explorer.vim
'''

[[plugins]]
repo = 'machakann/vim-sandwich' # https://github.com/machakann/vim-sandwich
hook_add = '''
xmap as <Plug>(textobj-sandwich-query-a)
omap is <Plug>(textobj-sandwich-query-i)
omap as <Plug>(textobj-sandwich-query-a)

xmap iss <Plug>(textobj-sandwich-auto-i)
xmap ass <Plug>(textobj-sandwich-auto-a)
omap iss <Plug>(textobj-sandwich-auto-i)
omap ass <Plug>(textobj-sandwich-auto-a)
'''
# saiw
# sdb
# sr srb

[[plugins]]
repo = 'easymotion/vim-easymotion' # https://github.com/easymotion/vim-easymotion
hook_add = '''
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1

" `s{char}{label}`
" nmap f <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
nmap f <Plug>(easymotion-overwin-f2)

" JK motions: Line motions
" map <Leader>j <Plug>(easymotion-j)
" map <Leader>k <Plug>(easymotion-k)
'''

