
# snipsnap
# @link https://github.com/snipsnapdev/snipsnap

snippet angular_multi-stage_node_and_dockerfile:angular "Multi-stage Node and Angular Dockerfile"
# Client App
FROM johnpapa/angular-cli as client-app
LABEL authors="${1:John Papa}"
WORKDIR /usr/src/app
COPY ["package.json", "npm-shrinkwrap.json*", "./"]
RUN npm install --silent
COPY . .
RUN ng build --prod

# Node server
FROM ${2:node:12-alpine} as node-server
WORKDIR /usr/src/app
COPY ["package.json", "npm-shrinkwrap.json*", "./"]
RUN npm install --production --silent && mv node_modules ../
COPY ${3:server.js} .
COPY ${4:/server} /usr/src/app/server

# Final image
FROM ${2:node:12-alpine}
WORKDIR /usr/src/app
COPY --from=node-server /usr/src /usr/src
COPY --from=client-app /usr/src/app/dist ./
EXPOSE ${5:3000}
# CMD ["node", "server.js"]
CMD ["npm", "start"]
$0
endsnippet

snippet angular_class:angular "Angular [class] binding"
[class]="${1:expression}"
endsnippet

snippet angular_style:angular "Angular [style] binding"
[style.${1:property}]="${2:expression}"
endsnippet

snippet angular_ng_class:angular "Angular ngClass"
[ngClass]="{${1:cssClass}: ${2:expression}}"
endsnippet

snippet angular_ng_for:angular "Angular *ngFor"
*ngFor="let ${1:item} of ${2:list}"${0}
endsnippet

snippet angular_ng_for_with_track_by:angular "Angular *ngFor with trackBy"
*ngFor="let ${1:item} of ${2:list}; trackBy:${1:item}.id"${0}
endsnippet

snippet angular_ng_for_async:angular "Angular *ngForAsync"
*ngFor="let ${1:item} of ${2:stream} | async as ${3:list}"${0}
endsnippet

snippet angular_ng_form:angular "Form with ngSubmit and form attributes"
<form (ngSubmit)="onSubmit()" #${1:form}="ngForm">
</form>
endsnippet

snippet angular_ng_form_array_name:angular "Angular formArrayName"
formArrayName="${1:control}"
endsnippet

snippet angular_ng_form_control_name:angular "Angular formControlName"
formControlName="${1:control}"
endsnippet

snippet angular_ng_form_group:angular "Angular formGroup"
[formGroup]="${1:form}"
endsnippet

snippet angular_ng_form_group_name:angular "Angular formGroupName"
[formGroupName]="${1:name}"
endsnippet

snippet angular_ng_form_submit:angular "Angular form submit"
<button type="submit" [disabled]="!${1:form}.form.valid">
  Save
</button>
endsnippet

snippet angular_ng_if:angular "Angular *ngIf"
*ngIf="${1:expression}"
endsnippet

snippet angular_ng_if_else:angular "Angular *ngIfElse"
*ngIf="${1:expression};else ${2:templateName}"
endsnippet

snippet angular_ng_model:angular "Angular ngModel"
[(ngModel)]="${1:binding}"
endsnippet

snippet angular_ng_router_link:angular "Angular routerLink"
[routerLink]="['/${1:routePath}']" routerLinkActive="${2:router-link-active}" $0
endsnippet

snippet angular_ng_router_link_with_parameter:angular "Angular routerLink with a route parameter"
[routerLink]="['${1:routePath}', ${2:routeParameterValue}]"
routerLinkActive="${3:router-link-active}"$0
endsnippet

snippet angular_ng_select:angular "<select> control with ngModel"
<select [(ngModel)]="${1:model}">
  <option *ngFor="let ${2:item} of ${3:list}" [value]="${2:item}">{{${2:item}}}</option>
</select>
endsnippet

snippet angular_ng_style:angular "Angular ngStyle"
[ngStyle]="{${1:style}: ${2:expression}}"
endsnippet

snippet angular_ng_switch:angular "Angular ngSwitch"
<div [ngSwitch]="${1:conditionExpression}">
  <div *ngSwitchCase="${2:expression}">${3:output}</div>
  <div *ngSwitchDefault>${4:output2}</div>
</div>
endsnippet

snippet angular_pre_json:angular "Angular pre debug | json"
<pre>{{${1:model} | json}}</pre>$0
endsnippet

snippet angular_pre_async_json:angular "Angular pre debug | async | json"
<pre>{{${1:model} | async | json}}</pre>$0
endsnippet

snippet angular_ng-container:angular "Angular ng-container"
<ng-container $0></ng-container>
endsnippet

snippet angular_ng-template:angular "Angular ng-template"
<ng-template [ngTemplateOutlet]="${1:outlet}" [ngOutletContext]="${2:context}"></ng-template>
endsnippet

snippet angular_ng-content:angular "Angular ng-content"
<ng-content select="${0:selector}"></ng-content>
endsnippet

snippet angular_node_express_server:angular "Node.js Express Server"
const express = require('express');
const app = express();
const port = process.env.PORT || ${1:port};
const www = process.env.WWW || '${2:./}';
app.use(express.static(www));
console.log(`serving \${www}`);
app.get('*', (req, res) => {
  res.sendFile(`index.html`, { root: www });
});
app.listen(port, () => console.log(`listening on http://localhost:\${port}`));
$0
endsnippet

snippet angular_component:angular "Angular component"
import { Component, OnInit } from '@angular/core';

@Component({
  selector: '${1:selector-name}',
  templateUrl: '${2:name}.component.html'
})

export class ${3:Name}Component implements OnInit {
  constructor() { }

  ngOnInit() { }$0
}
endsnippet

snippet angular_component_inline_template:angular "Angular component with an inline template"
import { Component, OnInit } from '@angular/core';

@Component({
  selector: '${1:selector-name}',
  template: `$0`
})

export class ${2:Name}Component implements OnInit {
  constructor() { }

  ngOnInit() { }
}
endsnippet

snippet angular_pipe:angular "Angular pipe"
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: '${1:selector-name}'
})

export class ${2:Name}Pipe implements PipeTransform {
  transform(value: any, ...args: any[]): any {
    $0
  }
}
endsnippet

snippet angular_service:angular "Angular Service with Injectable ProvidedIn Root"
import { Injectable } from '@angular/core';

@Injectable({providedIn: ${1:'root'}})
export class ${2:ServiceName}Service {
  constructor() { }
  $0
}
endsnippet

snippet angular_default_route_path:angular "Angular default route path"
{ path: '', pathMatch: 'full', redirectTo: '${1:path}' }$0
endsnippet

snippet angular_route_path_children:angular "Angular route path with children"
{
  path: '${1:path}', 
  component: ${2:Component},
  children: [
    { path: '${3:childpath}', component: ${4:ChildComponent} }
  ]
}$0
endsnippet

snippet angular_404_route_path:angular "Angular 404 route path"
{ path: '**', component: ${1:PathNotFoundComponent} }$0
endsnippet

snippet angular_eager_route_path:angular "Angular eager route path"
{ path: '${1:path}', component: ${2:Name}Component },
endsnippet

snippet angular_lazy_route_path:angular "Angular lazy route path"
{
  path: '${1:path}', 
  loadChildren: () => import('${2:lazy-path}').then(m => m.${3:lazy-module})
},
endsnippet

snippet angular_routing_params_subscribe:angular "Angular - subscribe to routing parameters"
this.route.paramMap
  .pipe(switchMap(params => params.get('id')), tap(id => (this.id = +id)))
  .subscribe(id => {$1});
$0
endsnippet

snippet angular_http_client_get:angular "Angular HttpClient.get"
return this.httpClient.get('${1:url}');$0
endsnippet

snippet angular_http_client_service:angular "Angular service with HttpClient"
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({providedIn: ${1:'root'}})
export class ${2:ServiceName}Service {
  constructor(private httpClient: HttpClient) { }
  $0
}
endsnippet

snippet angular_http_interceptor_logging:angular "Angular HttpInterceptor for Logging HttpClient"
import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';

@Injectable()
export class LogInterceptor implements HttpInterceptor {
  constructor() {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const started = Date.now();
    return next.handle(req).pipe(
      tap(event => {
        if (event instanceof HttpResponse) {
          const elapsed = Date.now() - started;
          console.log(`Request for \${req.urlWithParams} took \${elapsed} ms.`);
        }
      })
    );
  }
}
endsnippet

snippet angular_http_interceptor_headers:angular "Angular HttpInterceptor for headers HttpClient"
import { Injectable } from '@angular/core';
import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class HeaderInterceptor implements HttpInterceptor {
  constructor() {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const headers = req.headers
      .set('Content-Type', 'application/json');
    const authReq = req.clone({ headers });
    return next.handle(authReq);
  }
}
endsnippet

snippet angular_http_interceptor_empty:angular "Empty Angular HttpInterceptor for HttpClient"
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable()
export class ${2:Your}Interceptor implements HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    return next.handle(req);
  }
}
endsnippet

snippet angular_output_event:angular "Angular @Output event and emitter"
@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();
endsnippet

snippet angular_subscribe:angular "Angular observable subscribe"
this.${1:service}.${2:function}
  .subscribe(${3:arg} => this.${4:property} = ${3:arg});
$0
endsnippet

snippet angular_root_component:angular "Angular App root component"
import { Component } from '@angular/core';

@Component({
  selector: '${1:prefix-app}',
  template: `
    <router-outlet></router-outlet>
    `
})
export class ${2:App}Component { }
$0
endsnippet

snippet angular_root_module:angular "Angular Root Module"
import { NgModule } from '@angular/core';
import { BrowserModule  } from '@angular/platform-browser';
import { HttpModule } from '@angular/http';

import { ${1:App}Component } from './${1:app}.component';

@NgModule({
  imports: [
    BrowserModule,
    HttpModule,
  ],
  declarations: [${1:App}Component],
  bootstrap: [${1:App}Component],
})
export class ${1:App}Module { }
$0
endsnippet

snippet angular_route_definitions:angular "Route definitions"
import { Routes } from '@angular/router';

export const routes: Routes = [${0}]
endsnippet

snippet angular_module:angular "Angular Module"
import { NgModule } from '@angular/core';

import { ${1:Name}Component } from './${2:name}.component';

@NgModule({
  imports: [],
  exports: [],
  declarations: [${1:Name}Component],
  providers: [],
})
export class ${1:Name}Module { }
$0
endsnippet

snippet angular_directive:angular "Angular directive"
import { Directive } from '@angular/core';

@Directive({ selector: '[${1:selector-name}]' })
export class ${2:Name}Directive {
  constructor() { }
}
endsnippet

snippet angular_can_activate_guard:angular "Angular CanActivate guard"
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';

@Injectable({providedIn: ${1:'root'}})
export class ${2:Name}Guard implements CanActivate {
  constructor() { }

  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
    return true;$0
  }
}
endsnippet

snippet angular_can_activate_child_guard:angular "Angular CanActivateChild guard"
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';

@Injectable({providedIn: ${1:'root'}})
export class ${2:Name}Guard implements CanActivateChild {
  constructor() { }

  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
    return true;$0
  }
}
endsnippet

snippet angular_can_load_guard:angular "Angular CanLoad guard"
import { Injectable } from '@angular/core';
import { CanLoad, Route } from '@angular/router';

@Injectable({providedIn: ${1:'root'}})
export class ${2:Name}Guard implements CanLoad {
  constructor() { }

  canLoad(route: Route) {
    return true;$0
  }
}
endsnippet

snippet angular_can_deactivate_guard:angular "Angular CanDeactivate guard"
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';
import { Observable } from 'rxjs';

import { ${2:ComponentName}Component } from './${3:filename}.component';

// Consider using this interface for all CanDeactivate guards,
// and have your components implement this interface, too.
//
//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {
//
// export interface CanComponentDeactivate {
// canDeactivate: () => any;
// }

@Injectable({providedIn: ${4:'root'}})
export class ${1:Name}Guard implements CanDeactivate<${2:ComponentName}Component> {
  canDeactivate(
    component: ${2:ComponentName}Component,
    currentRoute: ActivatedRouteSnapshot, 
    currentState: RouterStateSnapshot
  ): Observable<boolean>|Promise<boolean>|boolean {
    return false;$0
  }
}
endsnippet

snippet angular_opt-in_preload_strategy:angular "Angular opt-in preload strategy"
import { PreloadingStrategy, Route } from '@angular/router';
import { Observable, of } from 'rxjs';

export class PreloadSelectedModulesList implements PreloadingStrategy {
  preload(route: Route, load: Function): Observable<any> {
    return route.data && route.data['${1:preload}'] ? load() : of(null);
  }
}
$0
endsnippet

snippet angular_network-aware_preload_strategy:angular "Angular network aware preload strategy"
import { Injectable } from '@angular/core';
import { PreloadingStrategy, Route } from '@angular/router';
import { Observable, EMPTY } from 'rxjs';

// avoid typing issues for now
export declare var navigator;

@Injectable({ providedIn: 'root' })
export class NetworkAwarePreloadStrategy implements PreloadingStrategy {
  preload(route: Route, load: () => Observable<any>): Observable<any> {
    return this.hasGoodConnection() ? load() : EMPTY;
  }

  hasGoodConnection(): boolean {
    const conn = navigator.connection;
    if (conn) {
      if (conn.saveData) {
        return false; // save data mode is enabled, so dont preload
      }
      const avoidTheseConnections = ['slow-2g', '2g' /* , '3g', '4g' */];
      const effectiveType = conn.effectiveType || '';
      if (avoidTheseConnections.includes(effectiveType)) {
        return false;
      }
    }
    return true;
  }
}
endsnippet

snippet angular_router_events:angular "Angular Router Events"
checkEvents() {
  this.router.events.subscribe(event => {
    switch (true) {
      case event instanceof ${1:eventName}:
        $0
        break;

      default:
        break;
    }
  });
}
endsnippet

snippet angular_module_skip_self_constructor:angular "Angular Module SkipSelf constructor"
constructor( @Optional() @SkipSelf() parentModule: ${1:ModuleName} {
  if (parentModule) {
    const msg = `${1:ModuleName} has already been loaded. 
      Import ${1:ModuleName} once, only, in the root AppModule.`;
    throw new Error(msg);
  }
}
endsnippet

snippet angular_import_rx_js:angular "RxJs import"
import { ${1:Observable} } from 'rxjs';
$0
endsnippet

snippet angular_import_rx_js_operator:angular "RxJs import"
import { ${1:map} } from 'rxjs/operators';
$0
endsnippet

snippet angular_resolver:angular "Angular Resolver"
import { Injectable } from '@angular/core';
import { Resolve, ActivatedRouteSnapshot } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({ providedIn: ${1:'root'} })
export class ${2:YourResolver} implements Resolve<${3:ObjectToResolve}> {
  resolve(route: ActivatedRouteSnapshot): Observable<${3:ObjectToResolve}> | Promise<${3:ObjectToResolve}> | ${3:ObjectToResolve} {
    return ${0};
  }
}
endsnippet

snippet angular_ng_rx_store_module:angular "NgRx Store Module"
import { NgModule } from '@angular/core';
import { EffectsModule } from '@ngrx/effects';
import { StoreModule } from '@ngrx/store';
import { StoreDevtoolsModule } from '@ngrx/store-devtools';
import { environment } from '../../environments/environment';

@NgModule({
  imports: [
    StoreModule.forRoot({}),
    EffectsModule.forRoot([]),
    environment.production ? [] : StoreDevtoolsModule.instrument()
  ]
})
export class $1StoreModule {}
endsnippet

snippet angular_ng_rx_create_action:angular "Creates an NgRx Action"
export const ${1:action} = createAction('[${2:Source}] ${3:Event}');
endsnippet

snippet angular_ng_rx_create_action_props:angular "Creates an NgRx Action with Props"
export const ${1:action} = createAction('[${2:Source}] ${3:Event}', props<{${4:key}: ${5:type}}>());
endsnippet

snippet angular_ng_rx_create_reducer:angular "Creates an NgRx Reducer"
const ${1:feature}Reducer = createReducer(
  initialState,
  on($1Actions.action, state => ({ ...state, ${2:prop}: ${3:updatedValue} })),
);

export function reducer(state: State | undefined, action: Action) {
  return $1Reducer(state, action);
}
endsnippet

snippet angular_ng_rx_create_effect:angular "Creates an NgRx Effect"
${1:effectName}$ = createEffect(() => {
  return this.actions$.pipe(
      ofType(${2:action}),
      /** An EMPTY observable only emits completion. Replace with your own observable stream */
      ${3:operator}(() => ${4:EMPTY}));
});
endsnippet

snippet angular_ng_rx_create_effect_api_call:angular "Creates an NgRx Effect Scaffolded for API Call"
${1:effectName}$ = createEffect(() => {
  return this.actions$.pipe(
      ofType(${2:Feature}Actions.${3:action}),
      ${4:operator}(() =>
        ${5:apiSource}.pipe(
          map(data => $2Actions.$3Success({ data })),
          catchError(error => of($2Actions.$3Failure({ error }))))
        ),
  );
});
endsnippet

snippet angular_ng_rx_create_selector:angular "Creates an NgRx Selector"
export const select${1:Feature}${2:Property} = createSelector(
  select$1,
  (state: $1State) => state.${3:property}
);
endsnippet

snippet angular_ng_rx_create_selector_props:angular "Creates an NgRx Selector using props"
export const select${1:Feature}${2:Property} = createSelector(
  select$1,
  (state: $1State, props) => ${3:selectLogic}
);
endsnippet

snippet angular_ng_rx_data_import_entity_module:angular "Import NgRx Entity Data Module"
EntityDataModule.forRoot(${1:entityConfig}),
endsnippet

snippet angular_ng_rx_data_entity_metadata:angular "NgRx Data Entity Metadata"
import { EntityMetadataMap } from '@ngrx/data';

const entityMetadata: EntityMetadataMap = {
  ${1:Model1}: {},${0}
};

export const entityConfig = {
  entityMetadata
};
endsnippet

snippet angular_ng_rx_data_entity_collection_service:angular "NgRx Data Entity Collection Data Service"
import { Injectable } from '@angular/core';
import {
  EntityCollectionServiceBase,
  EntityCollectionServiceElementsFactory
} from '@ngrx/data';
import { ${1:Model} } from '${2:../core}';

@Injectable({ providedIn: ${3:'root'} })
export class ${1:Model}Service extends EntityCollectionServiceBase<${1:Model}> {
  constructor(serviceElementsFactory: EntityCollectionServiceElementsFactory) {
    super('${1:Model}', serviceElementsFactory);
  }
}
endsnippet

snippet angular_track_by_function:angular "TrackBy Function"
${1:trackBy}(index: number, ${2:name}: ${3:model}): ${4:number} {
  return ${2:name}${5:.id};$0
}
endsnippet

